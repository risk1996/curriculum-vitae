---
import { twMerge } from "tailwind-merge";

interface Props {
  class?: string;
}
---

<div class={twMerge("embla relative", Astro.props.class)}>
  <div class="embla__viewport overflow-hidden">
    <div class="embla__container flex">
      <slot />
    </div>
  </div>

  <div class="embla__controls absolute inset-0 flex justify-between">
    <button class="embla__prev my-auto">&lt;</button>
    <button class="embla__next my-auto">&gt;</button>
  </div>
</div>

<script>
  import EmblaCarousel, { type EmblaCarouselType } from "embla-carousel";

  const nodes = document.querySelectorAll<HTMLElement>(".embla");

  for (const root of nodes) {
    const viewport = root.querySelector<HTMLElement>(".embla__viewport");
    const carousel: EmblaCarouselType = EmblaCarousel(viewport ?? root);

    const prev = root.querySelector(".embla__prev");
    if (prev) {
      prev.addEventListener("click", () => carousel.scrollPrev());
      const updatePrevActive = () =>
        carousel.canScrollPrev()
          ? prev.removeAttribute("disabled")
          : prev.setAttribute("disabled", "disabled");
      carousel.on("select", updatePrevActive);
      carousel.on("init", updatePrevActive);
      carousel.on("reInit", updatePrevActive);
      carousel.on("destroy", () => prev.removeAttribute("disabled"));
    }

    const next = root.querySelector(".embla__next");
    if (next) {
      next.addEventListener("click", () => carousel.scrollNext());
      const updateNextActive = () =>
        carousel.canScrollNext()
          ? next.removeAttribute("disabled")
          : next.setAttribute("disabled", "disabled");
      carousel.on("select", updateNextActive);
      carousel.on("init", updateNextActive);
      carousel.on("reInit", updateNextActive);
      carousel.on("destroy", () => next.removeAttribute("disabled"));
    }
  }
</script>
