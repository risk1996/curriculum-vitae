---
import { twMerge } from "tailwind-merge";

interface Props {
  class?: string;
}
---

<div class={twMerge("embla relative overflow-hidden", Astro.props.class)}>
  <slot />
</div>

<script>
  import EmblaCarousel from "embla-carousel";
  import { WheelGesturesPlugin } from "embla-carousel-wheel-gestures";
  import { array, number } from "valibot";

  import { readLocalStorage } from "../helpers/storage";

  const nodes = window.document.querySelectorAll<HTMLElement>(".embla");
  const POSTION_KEY = "carousel-position";
  // NOTE: Internal mutability
  const positions = readLocalStorage(POSTION_KEY, array(number()), []);

  for (let i = 0; i < nodes.length; i++) {
    const root = nodes[i];
    if (!root) continue;

    const viewport = root.querySelector<HTMLElement>(".embla__viewport");
    const carousel = EmblaCarousel(
      viewport ?? root,
      { containScroll: false, skipSnaps: true, startIndex: positions[i] ?? 0 },
      [WheelGesturesPlugin()],
    );
    carousel.on("select", (c) => (positions[i] = c.selectedScrollSnap()));

    const prev = root.querySelector(".embla__prev");
    if (prev) {
      prev.addEventListener("click", () => carousel.scrollPrev());
      const updatePrevActive = () =>
        carousel.canScrollPrev()
          ? prev.removeAttribute("disabled")
          : prev.setAttribute("disabled", "disabled");
      carousel.on("select", updatePrevActive);
      carousel.on("init", updatePrevActive);
      carousel.on("reInit", updatePrevActive);
      carousel.on("destroy", () => prev.removeAttribute("disabled"));
    }

    const next = root.querySelector(".embla__next");
    if (next) {
      next.addEventListener("click", () => carousel.scrollNext());
      const updateNextActive = () =>
        carousel.canScrollNext()
          ? next.removeAttribute("disabled")
          : next.setAttribute("disabled", "disabled");
      carousel.on("select", updateNextActive);
      carousel.on("init", updateNextActive);
      carousel.on("reInit", updateNextActive);
      carousel.on("destroy", () => next.removeAttribute("disabled"));
    }
  }

  window.addEventListener("beforeunload", () =>
    localStorage.setItem(POSTION_KEY, JSON.stringify(positions)),
  );
</script>
